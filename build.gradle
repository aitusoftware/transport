repositories {
    jcenter()
    mavenCentral()
    flatDir {
        dir('../proxygen/build/libs')
    }
    flatDir {
        dir('lib')
    }
}

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'net.ltgt.gradle:gradle-apt-plugin:0.12'
        classpath 'gradle.plugin.net.minecrell:licenser:0.3'
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'checkstyle'
apply plugin: 'net.ltgt.apt'
apply plugin: 'net.ltgt.apt-idea'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'net.minecrell.licenser'

sourceCompatibility = 1.9
targetCompatibility = 1.9
defaultTasks 'check', 'licenseFormat'

javadoc {
    exclude('module-info.java')
}

checkstyle {
    toolVersion = '6.3'
}

license {
    header = project.file('HEADER.txt')
    newLine = false
    exclude '**/*.properties'
}

group = 'com.aitusoftware'
version = '0.4.0'

ext {
    if (!project.hasProperty('sonatypeUrl')) sonatypeUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
    if (!project.hasProperty('sonatypeUsername')) sonatypeUsername = ''
    if (!project.hasProperty('sonatypePassword')) sonatypePassword = ''

}
ext.moduleName = 'com.aitusoftware.transport'


idea {
    project {
        configureAnnotationProcessing = true
    }
    module {
        apt {
            addGeneratedSourcesDirs = true
            addAptDependencies = true

            addCompileOnlyDependencies = false
            mainDependenciesScope = 'PROVIDED'
        }
    }
}

compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
    }
    aptOptions.processors = [
            'com.aitusoftware.proxygen.AnnotationPublisherGenerator',
            'com.aitusoftware.proxygen.MessageGenerator']
}

compileTestJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
    }
    aptOptions.processors = [
            'com.aitusoftware.proxygen.AnnotationPublisherGenerator',
            'com.aitusoftware.proxygen.MessageGenerator']
}

test {
    jvmArgs += ['--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED']
}

dependencies {
    testCompile 'junit:junit:4.12'
    testCompile 'org.hdrhistogram:HdrHistogram:2.1.9'
    testCompile "com.aitusoftware:proxygen:0.3.0"

    compile "com.aitusoftware:proxygen:0.3.0"
    compile group: 'org.agrona', name: 'agrona', version: '0.9.7'
    compile group: 'com.github.jnr', name: 'jnr-ffi', version: '2.1.7'


    apt "com.aitusoftware:proxygen:0.3.0"
    testApt "com.aitusoftware:proxygen:0.3.0"
}

task bundleJar(type: Jar) {
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar, javadocJar
}

ext {

    if (!project.hasProperty('ossrhUsername')) {
        ossrhUsername = ''
    }

    if (!project.hasProperty('ossrhPassword')) {
        ossrhPassword = ''
    }
}

def projectPom = {
    name = 'transport'
    packaging = 'pom'
    description = 'Transport messaging framework'
    url = 'https://github.com/aitusoftware/transport.git'

    scm {
        connection = 'scm:git:https://github.com/aitusoftware/transport.git'
        developerConnection = 'scm:git:https://github.com/aitusoftware/transport.git'
        url = 'https://github.com/aitusoftware/transport.git'
    }

    licenses {
        license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }

    developers {
        developer {
            id = 'epickrram'
            name = 'Mark Price'
            email = 'mark@aitusoftware.com'
            url = 'https://github.com/aitusoftware'
        }
    }
}

install {
    repositories.mavenInstaller.pom.project(projectPom)
}

signing {
    required { gradle.taskGraph.hasTask('uploadArchives') }
    sign configurations.archives
}

uploadArchives {
    repositories.mavenDeployer {
        beforeDeployment { deployment -> signing.signPom(deployment) }

        repository(url: sonatypeUrl) {
            authentication(userName: sonatypeUsername, password: sonatypePassword)
        }

        pom.project(projectPom)
    }
}
